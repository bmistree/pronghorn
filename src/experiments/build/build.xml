<project name="SingleHost" default="compile" basedir=".">

  <description>
    Boot up a Pronghorn instance that talks to a running floodlight instance.
  </description>

  <!--
      Match the progject name exactly after ant.file to get directory
   -->
  <dirname
    property="experiments_build_dir"
    file="${ant.file.SingleHost}"
  />

  <!-- global properties for this build file -->
  
  <!-- Ralph dependency files -->
  <property
      name="ralph_dep_dir"
      location="${experiments_build_dir}/../../../externals/ralph/"/>
  <property
      name="ralph_compiler_py"
      location="${ralph_dep_dir}/bin/emit_file.py"/>

  <property
      name="lib_build_path"
      location="${ralph_dep_dir}/ralph/java_lib/build"/>
  
  <property
      name="lib_class_path"
      location="${lib_build_path}/classes/"/>

  <property
      name="proto_jar_dir"
      location="${lib_build_path}/../"/>
  
  <property
      name="proto_class_path"
      location="${lib_build_path}/../protobuf-java-2.4.1.jar"/>

  <!-- Floodlight dependency -->
  <property
      name="floodlight_dep_dir"
      location="${experiments_build_dir}/../../../externals/floodlight/"/>

  <property
      name="floodlight_jar_dir"
      location="${floodlight_dep_dir}/target/"/>
  
  <property
      name="floodlight_class_path"
      location="${floodlight_dep_dir}/target/floodlight.jar"/>
  
  <!-- Pronghorn libraries -->
  <property
      name="pronghorn_libs_build_path"
      location="${experiments_build_dir}/../../pronghorn/build"/>
  <property
      name="pronghorn_libs_class_path"
      location="${pronghorn_libs_build_path}/classes"/>

  <property
      name="pronghorn_ralph_src_path"
      location="${pronghorn_libs_build_path}/../ralph_src/"/>  
  
  <!-- Build files in singledummytests -->
  <property
      name="experiments_package"
      value="experiments"/>

  <property
      name="experiments_ralph_src_dir"
      location="${experiments_build_dir}/../ralph_src"/>
  <property
      name="experiments_src_dir"
      location="${experiments_build_dir}/../src"/>
  <property
      name="experiments_ralph_emitted_dir"
      location="${experiments_build_dir}/../ralph_emitted"/>
  <property
      name="experiments_build_classes_dir"
      location="${experiments_build_dir}/classes"/>


  <!-- set up build directories for test -->
  <target name="init" description="setup build directories">
    <echo message="Setting up build directories for tests"/>
    <mkdir dir="${experiments_build_classes_dir}"/>
    <mkdir dir="${experiments_ralph_emitted_dir}"/>
  </target>


  <!-- COMPILING -->
  <!-- compile java libraries -->
  <target name="compile_libs" depends="init"
          description="compile library files">
    
    <ant antfile="${lib_build_path}/build.xml" target="compile_all" />
    <ant antfile="${pronghorn_libs_build_path}/build.xml" target="compile_all"/>
  </target>

  <!-- Compile to java -->
  <target name="translate_ralph" depends="init"
          description="translate ralph files">

    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${experiments_ralph_src_dir}/read_only.rph"/>
      <arg line="-o ${experiments_ralph_emitted_dir}/ReadOnlyJava.java"/>
      <arg line="-p ${experiments_package}"/>
      <arg line="-c ReadOnlyJava"/>
      <arg line="-I ${pronghorn_ralph_src_path}"/>
    </exec>

    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${experiments_ralph_src_dir}/ioff_on_application.rph"/>
      <arg line="-o ${experiments_ralph_emitted_dir}/IOffOnApplicationJava.java"/>
      <arg line="-p ${experiments_package}"/>
      <arg line="-c IOffOnApplicationJava"/>
      <arg line="-I ${pronghorn_ralph_src_path}"/>
    </exec>
    
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${experiments_ralph_src_dir}/multi_controller_off_on.rph"/>
      <arg line="-o ${experiments_ralph_emitted_dir}/MultiControllerOffOnJava.java"/>
      <arg line="-p ${experiments_package}"/>
      <arg line="-c MultiControllerOffOnJava"/>
      <arg line="-I ${pronghorn_ralph_src_path}"/>
    </exec>
    
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${experiments_ralph_src_dir}/pronghorn_connection.rph"/>
      <arg line="-o ${experiments_ralph_emitted_dir}/PronghornConnectionJava.java"/>
      <arg line="-p ${experiments_package}"/>
      <arg line="-c PronghornConnectionJava"/>
      <arg line="-I ${pronghorn_ralph_src_path}"/>
    </exec>

    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${experiments_ralph_src_dir}/off_on_application.rph"/>
      <arg line="-o ${experiments_ralph_emitted_dir}/OffOnApplicationJava.java"/>
      <arg line="-p ${experiments_package}"/>
      <arg line="-c OffOnApplicationJava"/>
      <arg line="-I ${pronghorn_ralph_src_path}"/>
    </exec>

    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${experiments_ralph_src_dir}/get_number_switches.rph"/>
      <arg line="-o ${experiments_ralph_emitted_dir}/GetNumberSwitchesJava.java"/>
      <arg line="-p ${experiments_package}"/>
      <arg line="-c GetNumberSwitchesJava"/>
      <arg line="-I ${pronghorn_ralph_src_path}"/>
    </exec>

    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${experiments_ralph_src_dir}/single_host_speculation.rph"/>
      <arg line="-o ${experiments_ralph_emitted_dir}/SingleHostSpeculationJava.java"/>
      <arg line="-p ${experiments_package}"/>
      <arg line="-c SingleHostSpeculationJava"/>
      <arg line="-I ${pronghorn_ralph_src_path}"/>
    </exec>

    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${experiments_ralph_src_dir}/ifairness_application.rph"/>
      <arg line="-o ${experiments_ralph_emitted_dir}/IFairnessApplicationJava.java"/>
      <arg line="-p ${experiments_package}"/>
      <arg line="-c IFairnessApplicationJava"/>
      <arg line="-I ${pronghorn_ralph_src_path}"/>
    </exec>

    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${experiments_ralph_src_dir}/fairness_application.rph"/>
      <arg line="-o ${experiments_ralph_emitted_dir}/FairnessApplicationJava.java"/>
      <arg line="-p ${experiments_package}"/>
      <arg line="-c FairnessApplicationJava"/>
      <arg line="-I ${pronghorn_ralph_src_path}"/>
    </exec>
    
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${experiments_ralph_src_dir}/multi_controller_fairness.rph"/>
      <arg line="-o ${experiments_ralph_emitted_dir}/MultiControllerFairnessJava.java"/>
      <arg line="-p ${experiments_package}"/>
      <arg line="-c MultiControllerFairnessJava"/>
      <arg line="-I ${pronghorn_ralph_src_path}"/>
    </exec>

    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${experiments_ralph_src_dir}/pronghorn_connection_fairness.rph"/>
      <arg line="-o ${experiments_ralph_emitted_dir}/PronghornConnectionFairnessJava.java"/>
      <arg line="-p ${experiments_package}"/>
      <arg line="-c PronghornConnectionFairnessJava"/>
      <arg line="-I ${pronghorn_ralph_src_path}"/>
    </exec>

    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${experiments_ralph_src_dir}/ierror_application.rph"/>
      <arg line="-o ${experiments_ralph_emitted_dir}/IErrorApplicationJava.java"/>
      <arg line="-p ${experiments_package}"/>
      <arg line="-c IErrorApplicationJava"/>
      <arg line="-I ${pronghorn_ralph_src_path}"/>
    </exec>
    
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${experiments_ralph_src_dir}/error_application.rph"/>
      <arg line="-o ${experiments_ralph_emitted_dir}/ErrorApplicationJava.java"/>
      <arg line="-p ${experiments_package}"/>
      <arg line="-c ErrorApplicationJava"/>
      <arg line="-I ${pronghorn_ralph_src_path}"/>
    </exec>

    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${experiments_ralph_src_dir}/multi_controller_error.rph"/>
      <arg line="-o ${experiments_ralph_emitted_dir}/MultiControllerErrorJava.java"/>
      <arg line="-p ${experiments_package}"/>
      <arg line="-c MultiControllerErrorJava"/>
      <arg line="-I ${pronghorn_ralph_src_path}"/>
    </exec>

    
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${experiments_ralph_src_dir}/pronghorn_connection_error.rph"/>
      <arg line="-o ${experiments_ralph_emitted_dir}/PronghornConnectionErrorJava.java"/>
      <arg line="-p ${experiments_package}"/>
      <arg line="-c PronghornConnectionErrorJava"/>
      <arg line="-I ${pronghorn_ralph_src_path}"/>
    </exec>
    
  </target>

  
  <target name="ralph_to_byte_code"
          depends="init,compile_libs"
          description="compile ralph files">
    <!-- Compile all ralph java to bytecode -->
    <javac
        srcdir="${experiments_ralph_emitted_dir}"
        destdir="${experiments_build_classes_dir}"
        classpath="${lib_class_path}:${pronghorn_libs_class_path}:${proto_class_path}"
        debug="true"
        debuglevel="lines,vars,source"
        includeantruntime="false" />
  </target>

    
  <!-- compile ralph endpoints to java programs, including translating -->
  <target
      name="compile_ralph"
      depends="init,compile_libs,translate_ralph,ralph_to_byte_code"
      description="compile ralph files">
  </target>

  <!-- compile java test harnesses for ralph code  -->
  <target
      name="compile_experiments"
      depends="init,compile_ralph"
      description="compile test harnesses for ralph code">
    <javac
        srcdir="${experiments_src_dir}"
        destdir="${experiments_build_classes_dir}"
        classpath="${experiments_build_classes_dir}:
                   ${lib_class_path}:
                   ${pronghorn_libs_class_path}:
                   ${floodlight_class_path}:${proto_class_path}"
        debug="true"
        debuglevel="lines,vars,source"
        includeantruntime="false" />
  </target>

  <!-- jarify all -->
  <target
      name="jarify_all"
      depends="init,compile_libs,compile_experiments,single_host,
               single_controller_latency,single_controller_throughput,
               single_controller_variable_contention_throughput,
               read_only,multi_controller_latency,
               multi_controller_throughput,ordering,
               multi_controller_fairness,speculation, single_controller_error,
               multi_controller_error,ordering,
               single_controller_fairness,read_only"
      description="create jars for each type of experiment">
  </target>


  <!-- Run pronghorn connected to floodlight -->
  <target
      name="make_jar"
      description="Make a jar">
    <jar destfile="${dest_jar}" filesetmanifest="mergewithoutmain">
      <manifest>
        <attribute name="Main-Class" value="${experiments_package}.${main_class}"/>
        <attribute name="Class-Path"
                   value="${lib_class_path}:
                          ${proto_class_path}:
                          ${pronghorn_libs_class_path}:
                          ${experiments_build_classes_dir}:
                          ${floodlight_class_path}"/>
      </manifest>
      <fileset dir="${lib_class_path}"/>
      <fileset dir="${pronghorn_libs_class_path}"/>
      <fileset dir="${experiments_build_classes_dir}"/>
      <zipgroupfileset dir="${proto_jar_dir}" includes="**/*.jar" />
      <zipgroupfileset dir="${floodlight_jar_dir}" includes="**/*.jar" />
    </jar>
  </target>
  
  
  <!-- Run pronghorn connected to floodlight -->
  <property
      name="single_host_jar"
      value="single_host.jar"/>
  <target
      name="single_host"
      depends="compile_experiments"
      description="Run a single pronghorn instance connected to floodlight.">
    <antcall target="make_jar">
      <param name="main_class" value="SingleHost"/>
      <param name="dest_jar" value="${single_host_jar}"/>
    </antcall>
  </target>

  
  <!-- Single controller latency jar -->
  <property
      name="single_controller_latency_jar"
      value="single_controller_latency.jar"/>
  <target
      name="single_controller_latency"
      depends="compile_libs,compile_experiments"
      description="Run no contention latency benchmark on single instance.">
    <antcall target="make_jar">
      <param name="main_class" value="SingleControllerLatency"/>
      <param name="dest_jar" value="${single_controller_latency_jar}"/>
    </antcall>
  </target>


  <!--
      Ant for running test for throughput test with fine grained
      locking and no contention
  -->
    <property
      name="single_controller_throughput_jar"
      value="single_controller_throughput.jar"/>
    <target
      name="single_controller_throughput"
      depends="compile_libs,compile_experiments"
      description="Single controller throughput">
      <antcall target="make_jar">
        <param name="main_class" value="SingleControllerThroughput"/>
        <param name="dest_jar" value="${single_controller_throughput_jar}"/>
      </antcall>
    </target>

  <property
      name="single_controller_variable_contention_throughput_jar"
      value="single_controller_variable_contention_throughput.jar"/>
  <target
      name="single_controller_variable_contention_throughput"
      depends="compile_libs,compile_experiments"
      description="Run no contention throughput benchmark on single instance.">
      <antcall target="make_jar">
        <param name="main_class" value="SingleControllerVariableContentionAllSwitches"/>
        <param name="dest_jar" value="${single_controller_variable_contention_throughput_jar}"/>
      </antcall>
  </target>


  <!--
      Ant for running test for throughput test with fine-grained
      locking and contention
  -->
  <property
      name="read_only_latency_jar"
      value="read_only_latency.jar"/>
  <target
      name="read_only"
      depends="compile_libs,compile_experiments"
      description="Jar for read only">

      <antcall target="make_jar">
        <param name="main_class" value="ReadOnlyLatency"/>
        <param name="dest_jar" value="${read_only_latency_jar}"/>
      </antcall>
  </target>


  <!-- Ant for running test for latency test with no contention -->  
  <property
      name="multi_controller_latency_jar"
      value="multi_controller_latency.jar"/>
  <target
      name="multi_controller_latency"
      depends="compile_libs,compile_experiments"
      description="Run no contention latency benchmark across instances">

      <antcall target="make_jar">
        <param name="main_class" value="MultiControllerLatency"/>
        <param name="dest_jar" value="${multi_controller_latency_jar}"/>
      </antcall>
  </target>


  <!--
      Ant for running test for throughput test with fine grained
      locking and no contention on multiple controllers
  -->
  <property
      name="multi_controller_throughput_jar"
      value="multi_controller_throughput.jar"/>
  <target
      name="multi_controller_throughput"
      depends="compile_libs,compile_experiments"
      description="Run no contention throughput benchmark on multiple instances.">

      <antcall target="make_jar">
        <param name="main_class" value="MultiControllerThroughput"/>
        <param name="dest_jar" value="${multi_controller_throughput_jar}"/>
      </antcall>
  </target>

  <!--
      Ant for running test for running test to show that we handle
      reordering
  -->
  <property
      name="ordering_jar"
      value="ordering.jar"/>
  <target
      name="ordering"
      depends="compile_libs,compile_experiments"
      description="Show that we handle reordering.">

      <antcall target="make_jar">
        <param name="main_class" value="Ordering"/>
        <param name="dest_jar" value="${ordering_jar}"/>
      </antcall>
  </target>


  <!-- Multi-controller fairness properties   -->
  <property
      name="multi_controller_fairness_jar"
      value="multi_controller_fairness.jar"/>
  <target
      name="multi_controller_fairness"
      depends="compile_libs,compile_experiments"
      description="Show that different deadlock
                   avoidance guarantees provide different
                   fairness guarantees for multi controllers.">

      <antcall target="make_jar">
        <param name="main_class" value="MultiControllerFairness"/>
        <param name="dest_jar" value="${multi_controller_fairness_jar}"/>
      </antcall>
  </target>

  <!-- single-controller fairness properties   -->
  <property
      name="single_controller_fairness_jar"
      value="single_controller_fairness.jar"/>
  <target
      name="single_controller_fairness"
      depends="compile_libs,compile_experiments"
      description="Show that different deadlock
                   avoidance guarantees provide different
                   fairness guarantees for single controller.">

      <antcall target="make_jar">
        <param name="main_class" value="SingleControllerFairness"/>
        <param name="dest_jar" value="${single_controller_fairness_jar}"/>
      </antcall>
  </target>

  <!-- single-controller fairness properties   -->
  <property
      name="single_controller_error_jar"
      value="single_controller_error.jar"/>
  <target
      name="single_controller_error"
      depends="compile_libs,compile_experiments"
      description="Handle random errors on a single controller">

      <antcall target="make_jar">
        <param name="main_class" value="SingleControllerError"/>
        <param name="dest_jar" value="${single_controller_error_jar}"/>
      </antcall>
  </target>


  <!-- single-controller fairness properties   -->
  <property
      name="multi_controller_error_jar"
      value="multi_controller_error.jar"/>
  <target
      name="multi_controller_error"
      depends="compile_libs,compile_experiments"
      description="Handle random errors on multiple controllers">

      <antcall target="make_jar">
        <param name="main_class" value="MultiControllerError"/>
        <param name="dest_jar" value="${multi_controller_error_jar}"/>
      </antcall>
  </target>

  
  
  <!-- Testing speculation  -->
  <property
      name="speculation_jar"
      value="speculation.jar"/>
  <target
      name="speculation"
      depends="compile_libs,compile_experiments"
      description="Compare latencies with and without speculation">

      <antcall target="make_jar">
        <param name="main_class" value="SingleControllerSpeculation"/>
        <param name="dest_jar" value="${speculation_jar}"/>
      </antcall>
  </target>

  
  
  <!-- Delete the build directories -->
  <target name="clean" description="get rid of build dir">
    <delete dir="${experiments_build_classes_dir}"/>
    <delete dir="${experiments_ralph_emitted_dir}"/>
    
    <!-- Delete ralph compiler output -->
    <delete file="parser.out"/>
    <delete file="parsetab.py"/>

    <!-- Delete generated jars -->
    <delete file="${single_host_jar}"/>
    <delete file="${single_controller_throughput_jar}"/>
    <delete file="${single_controller_variable_contention_throughput_jar}"/>
    <delete file="${read_only_latency_jar}"/>
    <delete file="${multi_controller_latency_jar}"/>
    <delete file="${multi_controller_error_jar}"/>
    <delete file="${multi_controller_throughput_jar}"/>
    <delete file="${ordering_jar}"/>
    <delete file="${multi_controller_fairness_jar}"/>
    <delete file="${single_controller_fairness_jar}"/>
    <delete file="${single_controller_error_jar}"/>
    <delete file="${single_controller_latency_jar}"/>
    <delete file="${speculation_jar}"/>
    
  </target>

  <target
      name="clean_all"
      depends="clean"
      description="get rid of build dir and all built libs">
    <ant antfile="${lib_build_path}/build.xml" target="clean" />
  </target>

  
</project>

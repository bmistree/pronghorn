<project name="Experiments" default="compile" basedir=".">

  <description>
    Run a bunch of experiments
  </description>

  <dirname
    property="experiments_build_dir"
    file="${ant.file.Experiments}"
  />

  <property
      name="output_filename"
      value="output.csv"
   />

  <property
      name="rest_ports"
      value="8080"
   />

  
  <!-- global properties for this build file -->
  
  <!-- Ralph dependency files -->
  <property
      name="ralph_dep_dir"
      location="${experiments_build_dir}/../../../../externals/ralph/"/>

  <property
      name="lib_build_path"
      location="${ralph_dep_dir}/ralph/java_lib/build"/>
  <property
      name="lib_class_path"
      location="${lib_build_path}/classes/"/>
  <property
      name="proto_class_path"
      location="${lib_build_path}/../protobuf-java-2.4.1.jar"/>

  <!-- Pronghorn libraries -->
  <property
      name="pronghorn_libs_build_path"
      location="${experiments_build_dir}/../../../pronghorn/build"/>
  <property
      name="pronghorn_libs_class_path"
      location="${pronghorn_libs_build_path}/classes"/>

  <!-- Single host libraries -->
  <property
      name="single_host_dir"
      location="${experiments_build_dir}/../../../single_host"/>

  <property
      name="single_host_build_path_dir"
      location="${single_host_dir}/build/"/>
  
  <property
      name="single_host_build_classes_dir"
      location="${single_host_build_path_dir}/classes"/>

  
  <!-- Build files for experiments -->
  <property
      name="experiments_package"
      value="experiments"/>

  <property
      name="experiments_src_dir"
      location="${experiments_build_dir}/../src"/>
  
  <property
      name="experiments_build_classes_dir"
      location="${experiments_build_dir}/classes"/>


  
  <!-- set up build directories for test -->
  <target name="init" description="setup build directories">
    <echo message="Setting up build directories for tests"/>
    <mkdir dir="${experiments_build_classes_dir}"/>
  </target>


  <!-- COMPILING -->
  <!-- compile java libraries -->
  <target name="compile_libs" depends="init"
          description="compile library files">
    <ant antfile="${lib_build_path}/build.xml" target="compile_all" />
    <ant antfile="${pronghorn_libs_build_path}/build.xml" target="compile_all"/>
    <ant antfile="${single_host_build_path_dir}/build.xml" target="compile_single_host"/>
  </target>

  <!-- Compile experiments -->
  <target
      name="compile_experiments"
      depends="init,compile_libs"
      description="compile all experiments">
    <javac
        srcdir="${experiments_src_dir}"
        destdir="${experiments_build_classes_dir}"
        classpath="${single_host_build_classes_dir}:
                   ${lib_class_path}:
                   ${pronghorn_libs_class_path}"
        debug="true"
        debuglevel="lines,vars,source"
        includeantruntime="false" />
  </target>

  <!-- The default number of latency operations to run -->
  <property
      name="latency_num_ops"
      value="5000"/>
  <!-- The number of threads to run -->
  <property
      name="latency_num_threads"
      value="1"/>
  <!-- Ant for running test for latency test with no contention -->
  <target
      name="run_SingleControllerLatency"
      depends="compile_libs,compile_experiments"
      description="Run no contention latency benchmark on single instance.">
    <java
        dir="${experiments_build_classes_dir}"
        classpath="${single_host_build_classes_dir}:
                   ${lib_class_path}:
                   ${proto_class_path}:
                   ${pronghorn_libs_class_path}:
                   ${experiments_build_classes_dir}"
        classname="${experiments_package}.SingleControllerLatency" fork="yes">
        <arg line="${rest_ports}"/>
        <arg line="${latency_num_ops}"/>
        <arg line="${latency_num_threads}"/>
        <arg line="${output_filename}"/>
    </java>
  </target>


  <!--
      Ant for running test for throughput test with fine grained
      locking and no contention
  -->
  <target
      name="run_NoContentionThroughput"
      depends="compile_libs,compile_experiments"
      description="Run no contention throughput benchmark on single instance.">
    <java
        dir="${experiments_build_classes_dir}"
        classpath="${single_host_build_classes_dir}:
                   ${lib_class_path}:
                   ${proto_class_path}:
                   ${pronghorn_libs_class_path}:
                   ${experiments_build_classes_dir}"
        classname="${experiments_package}.SingleControllerThroughput" fork="yes">
        <arg line="${rest_ports}"/>
        <arg line="10000"/>
        <arg line="false"/>
        <arg line="1"/>
        <arg line="${output_filename}"/>
    </java>
  </target>


  <property
      name="variable_contention_num_threads"
      value="1"/>
  <property
      name="variable_contention_num_ops"
      value="1000"/>  
  <target
      name="run_VariableContentionThroughput"
      depends="compile_libs,compile_experiments"
      description="Run no contention throughput benchmark on single instance.">
    <java
        dir="${experiments_build_classes_dir}"
        classpath="${single_host_build_classes_dir}:
                   ${lib_class_path}:
                   ${proto_class_path}:
                   ${pronghorn_libs_class_path}:
                   ${experiments_build_classes_dir}"
        classname="${experiments_package}.SingleControllerThroughput" fork="yes">
        <arg line="${rest_ports}"/>
        <arg line="${variable_contention_num_ops}"/>
        <arg line="false"/>
        <arg line="${variable_contention_num_threads}"/>
        <arg line="${output_filename}"/>
    </java>
  </target>

  

  <!--
      Ant for running test for throughput with coarse locking and no
      contention.
  -->
  <target
      name="run_NoContentionCoarseLockingThroughput"
      depends="compile_libs,compile_experiments"
      description="Run no contention throughput with coarse locking.">
    <java
        dir="${experiments_build_classes_dir}"
        classpath="${single_host_build_classes_dir}:
                   ${lib_class_path}:
                   ${proto_class_path}:
                   ${pronghorn_libs_class_path}:
                   ${experiments_build_classes_dir}"
        classname="${experiments_package}.SingleControllerThroughput" fork="yes">
        <arg line="${rest_ports}"/>
        <arg line="10000"/>
        <arg line="true"/>
        <arg line="1"/>
        <arg line="${output_filename}"/>
    </java>
  </target>


  <!--
      Ant for running test for throughput test with fine-grained
      locking and contention
  -->
  <target
      name="run_ContentionThroughput"
      depends="compile_libs,compile_experiments"
      description="Run no contention throughput benchmark on single instance.">
    <java
        dir="${experiments_build_classes_dir}"
        classpath="${single_host_build_classes_dir}:
                   ${lib_class_path}:
                   ${proto_class_path}:
                   ${pronghorn_libs_class_path}:
                   ${experiments_build_classes_dir}"
        classname="${experiments_package}.SingleControllerThroughput" fork="yes">
        <arg line="${rest_ports}"/>
        <arg line="10000"/>
        <arg line="false"/>
        <arg line="2"/>
        <arg line="${output_filename}"/>
    </java>
  </target>


  <!--
      Ant for running test for throughput with coarse locking and
      contention
  -->
  <target
      name="run_ContentionCoarseLockingThroughput"
      depends="compile_libs,compile_experiments"
      description="Run no contention throughput with coarse locking.">
    <java
        dir="${experiments_build_classes_dir}"
        classpath="${single_host_build_classes_dir}:
                   ${lib_class_path}:
                   ${proto_class_path}:
                   ${pronghorn_libs_class_path}:
                   ${experiments_build_classes_dir}"
        classname="${experiments_package}.SingleControllerThroughput" fork="yes">
        <arg line="${rest_ports}"/>
        <arg line="10000"/>
        <arg line="true"/>
        <arg line="2"/>
        <arg line="${output_filename}"/>
    </java>
  </target>


  <!-- Ant for running test for latency test with no contention -->
  <property
      name="latency_children_to_contact_host_ports"
      value="-1"/>
  <property
      name="latency_port_to_listen_for_connections_on"
      value="9393"/>
  <target
      name="run_MultiControllerLatency"
      depends="compile_libs,compile_experiments"
      description="Run no contention latency benchmark across instances">
    <java
        dir="${experiments_build_classes_dir}"
        classpath="${single_host_build_classes_dir}:
                   ${lib_class_path}:
                   ${proto_class_path}:
                   ${pronghorn_libs_class_path}:
                   ${experiments_build_classes_dir}"
        classname="${experiments_package}.MultiControllerLatency" fork="yes">
        <arg line="${rest_ports}"/>
        <arg line="${latency_children_to_contact_host_ports}"/>
        <arg line="${latency_port_to_listen_for_connections_on}"/>        
        <arg line="${latency_num_ops}"/>
        <arg line="${output_filename}"/>
    </java>
  </target>


  <!-- Ant for running multi controller error-->
  <property
      name="error_children_to_contact_host_ports"
      value="-1"/>
  <property
      name="error_port_to_listen_for_connections_on"
      value="5393"/>
  <property
      name="error_num_ops"
      value="20"/>
  <target
      name="run_MultiControllerError"
      depends="compile_libs,compile_experiments"
      description="Run multi controller error">
    <java
        dir="${experiments_build_classes_dir}"
        classpath="${single_host_build_classes_dir}:
                   ${lib_class_path}:
                   ${proto_class_path}:
                   ${pronghorn_libs_class_path}:
                   ${experiments_build_classes_dir}"
        classname="${experiments_package}.MultiControllerError" fork="yes">
        <arg line="${rest_ports}"/>
        <arg line="${error_children_to_contact_host_ports}"/>
        <arg line="${error_port_to_listen_for_connections_on}"/>
        <arg line="${error_num_ops}"/>
        <arg line="${error_failure_prob}"/>
        <arg line="${output_filename}"/>
    </java>
  </target>

  
  <!--
      Ant for running test for throughput test with fine grained
      locking and no contention on multiple controllers
  -->
  <property
      name="throughput_children_to_contact_host_ports"
      value="-1"/>
  <property
      name="throughput_port_to_listen_for_connections_on"
      value="19393"/>
  <property
      name="throughput_num_ops"
      value="5000"/>
  <target
      name="run_MultiControllerNoContentionThroughput"
      depends="compile_libs,compile_experiments"
      description="Run no contention throughput benchmark on multiple instances.">
    <java
        dir="${experiments_build_classes_dir}"
        classpath="${single_host_build_classes_dir}:
                   ${lib_class_path}:
                   ${proto_class_path}:
                   ${pronghorn_libs_class_path}:
                   ${experiments_build_classes_dir}"
        classname="${experiments_package}.MultiControllerThroughput" fork="yes">
        <arg line="${rest_ports}"/>
        <arg line="${throughput_children_to_contact_host_ports}"/>
        <arg line="${throughput_port_to_listen_for_connections_on}"/>
        <arg line="${throughput_num_ops}"/>
        <arg line="${output_filename}"/>
    </java>
  </target>

  

  
  <!--
      Ant for running test for running test to show that we handle
      reordering
  -->
  <property
      name="ordering_ensure_ordering"
      value="true"/>
  <property
      name="ordering_num_tests"
      value="100"/>  
  <target
      name="run_Ordering"
      depends="compile_libs,compile_experiments"
      description="Show that we handle reordering.">
    <java
        dir="${experiments_build_classes_dir}"
        classpath="${single_host_build_classes_dir}:
                   ${lib_class_path}:
                   ${proto_class_path}:
                   ${pronghorn_libs_class_path}:
                   ${experiments_build_classes_dir}"
        classname="${experiments_package}.Ordering" fork="yes">
        <arg line="${rest_ports}"/>
        <arg line="${ordering_num_tests}"/>
        <arg line="${ordering_ensure_ordering}"/>
        <arg line="${output_filename}"/>
    </java>
  </target>


  <!-- Testing fairness properties   -->
  <property
      name="wound_wait"
      value="false"/>
  <property
      name="fairness_num_ops"
      value="1000"/>
  <target
      name="run_Fairness"
      depends="compile_libs,compile_experiments"
      description="Show that different deadlock
                   avoidance guarantees provide different
                   fairness guarantees.">
    <java
        dir="${experiments_build_classes_dir}"
        classpath="${single_host_build_classes_dir}:
                   ${lib_class_path}:
                   ${proto_class_path}:
                   ${pronghorn_libs_class_path}:
                   ${experiments_build_classes_dir}"
        classname="${experiments_package}.Fairness" fork="yes">
        <arg line="${rest_ports}"/>
        <arg line="${wound_wait}"/>
        <arg line="${fairness_num_ops}"/>
        <arg line="${output_filename}"/>
    </java>
  </target>


  <!-- Testing error on a single controller -->
  <property
      name="error_num_ops_to_run_per_experiment"
      value="100"/>
  <property
      name="error_failure_prob"
      value="0.0"/>
  <property
      name="error_num_experiments_to_run"
      value="10"
      />
  <target
      name="run_Error"
      depends="compile_libs,compile_experiments"
      description="Show that different deadlock
                   avoidance guarantees provide different
                   fairness guarantees.">
    <java
        dir="${experiments_build_classes_dir}"
        classpath="${single_host_build_classes_dir}:
                   ${lib_class_path}:
                   ${proto_class_path}:
                   ${pronghorn_libs_class_path}:
                   ${experiments_build_classes_dir}"
        classname="${experiments_package}.SingleControllerError"
        fork="yes">

        <arg line="${rest_ports}"/>
        <arg line="${error_num_ops_to_run_per_experiment}"/>
        <arg line="${error_num_experiments_to_run}"/>
        <arg line="${error_failure_prob}"/>
        <arg line="${output_filename}"/>
    </java>
  </target>


  
  <!-- Delete the build directories -->
  <target name="clean" description="get rid of build dir">
    <delete dir="${experiments_build_classes_dir}"/>
  </target>
  
</project>

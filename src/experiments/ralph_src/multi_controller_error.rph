#include 'iapplication.rph'
alias Interface IApplication as 'pronghorn.IApplicationJava.IApplication';

alias Service Instance as 'pronghorn.InstanceJava.Instance';
alias Service ErrorApplication as 'experiments.ErrorApplicationJava.ErrorApplication';
alias Interface IErrorApplication as 'experiments.IErrorApplicationJava.IErrorApplication';
alias Service MultiControllerErrorApp as 'experiments.MultiControllerErrorJava.MultiControllerErrorApp';


Struct Wrapper {
    Remote MultiControllerErrorApp service = null;
}

Service MultiControllerErrorApp
    implements Interface IApplication, Interface IErrorApplication {

    Service Instance inst = null;
    Service ErrorApplication local_error_app = null;
    List(element: Struct Wrapper) partners;
    TVar Map(from: Text, to: Struct StructWrappedSwitch) switch_map;

    // @Override: from IApplication interface
    init(Service Instance inst_,
        TVar Map(from: Text, to: Struct StructWrappedSwitch) switch_map_)
    {
        inst = inst_;
        switch_map = switch_map_;
        local_error_app.init(inst,switch_map);
    }

    // @Override: from IApplication interface
    run()
    {
        local_error_app.run();
    }

    // @Override --- from IErrorApplication
    block_traffic_all_switches()
    {
        atomically
        {
            // perform locally
            local_error_app.block_traffic_all_switches();

            // tell children to perform their reads/writes
            for (Struct Wrapper wrapper in partners)
                wrapper.service.block_traffic_all_switches();
        }
    }
    // @Override --- from IErrorApplication
    remove_first_entry_all_switches()
    {
        atomically
        {
            // perform locally
            local_error_app.remove_first_entry_all_switches();

            // tell children to perform their reads/writes
            for (Struct Wrapper wrapper in partners)
                wrapper.service.remove_first_entry_all_switches();
        }
    }

    // @Override --- from IErrorApplication
    logical_clear_switch_do_not_flush_clear_to_hardware(Text switch_id)
    {
        atomically
        {
            // do not forward to children
           local_error_app.logical_clear_switch_do_not_flush_clear_to_hardware(switch_id);
        }
    }
    // @Override --- from IErrorApplication
    num_flow_table_entries(Text switch_id) returns Number
    {
        Number to_return = 0;
        atomically
        {
            // do not forward to children
            to_return = local_error_app.num_flow_table_entries(switch_id);
        }
        return to_return;
    }

    install_remotes(ServiceFactory factory) {
        // install a copy of this application on all connections
        List(element: Text) conn_uuids;
        conn_uuids = connected_uuids();
        Text loc_uuid = null;
        loc_uuid = local_uuid();

        for (Text conn_uuid in conn_uuids) {
            if (conn_uuid != loc_uuid) {
                ServiceReference service_reference = null;
                service_reference = install(conn_uuid, factory);
                Remote MultiControllerErrorApp remote_partner = null;
                remote_partner = factory.construct_remote_from_reference(service_reference);
                Struct Wrapper wrapper;
                wrapper.service = remote_partner;
                partners.append(wrapper);
            }
        }
    }
}

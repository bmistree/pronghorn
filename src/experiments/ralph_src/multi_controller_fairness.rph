#include 'iapplication.rph'
alias Interface IApplication as 'pronghorn.IApplicationJava.IApplication';

alias Service Instance as 'pronghorn.InstanceJava.Instance';
alias Endpoint PronghornConnectionFairness as 'experiments.PronghornConnectionFairnessJava.PronghornConnectionFairness';
alias Service FairnessApplication as 'experiments.FairnessApplicationJava.FairnessApplication';
alias Interface IFairnessApplication as 'experiments.IFairnessApplicationJava.IFairnessApplication';


/**
   This test is supposed to run on multiple controllers.

   The head controller sends an event into the system, which performs a read on
   a local switch, and fowrards the request on to all children.  If a child has
   should_write set to true, then the child performs a write on its switch.
 */
Struct ConnectionWrapper
{
    Endpoint PronghornConnectionFairness child = null;
}

Service MultiControllerFairnessApp
    implements Interface IApplication, Interface IFairnessApplication
{
    Service Instance inst = null;
    Service FairnessApplication fairness_app;
    TVar Map(from: Text, to: Struct StructWrappedSwitch) switch_map;

    // Other controllers connected to.  Connections are directional.  Eg.,
    // A -> B
    // where A only requests single ops on B (B cannot request single ops on A).
    TVar List(element : Struct ConnectionWrapper) children;

    // When receive a single_op request, most nodes do not write to their local
    // switches: they only perform reads.  This flag tells us whether we should
    // write or read.
    TrueFalse should_write = False;
    set_should_write(TrueFalse should_write_)
    {
        should_write = should_write_;
    }
    
    // @Override: from IApplication interface
    init(Service Instance inst_,
        TVar Map(from: Text, to: Struct StructWrappedSwitch) switch_map_)
    {
        inst = inst_;
        switch_map = switch_map_;
        fairness_app.init(inst,switch_map);
    }

    // @Override: from IApplication interface
    run()
    {
        fairness_app.run();
    }

    // @Override: from IFairnessApplication interface
    single_add(Text ip_src)
    {
        // Ask partner to perform action and perform action locally.
        atomically
        {
            // perform action locally
            for (Text switch_id in switch_map)
            {
                if (should_write)
                    fairness_app.single_add(ip_src);
                else
                {
                    Struct StructWrappedSwitch sws = switch_map.get(switch_id);
                    sws.wrapped_switch.ftable_size();
                }
            }
            // tell children to perform their reads/writes
            for (Struct ConnectionWrapper conn_wrap in children)
                conn_wrap.child.single_add(ip_src);
        }
    }

    add_child_connection(Endpoint PronghornConnectionFairness connection)
    {
        Struct ConnectionWrapper connection_wrapper;
        connection_wrapper.child = connection;
        children.append(connection_wrapper);
    }
}

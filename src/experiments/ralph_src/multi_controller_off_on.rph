#include 'iapplication.rph'
alias Interface IApplication as 'pronghorn.IApplicationJava.IApplication';

alias Service Instance as 'pronghorn.InstanceJava.Instance';
alias Endpoint PronghornConnection as 'experiments.PronghornConnectionJava.PronghornConnection';
alias Service OffOnApplication as 'experiments.OffOnApplicationJava.OffOnApplication';
alias Interface IOffOnApplication as 'experiments.IOffOnApplicationJava.IOffOnApplication';


Struct ConnectionWrapper
{
    Endpoint PronghornConnection child;
}

Service MultiControllerOffOn
    implements Interface IApplication, Interface IOffOnApplication
{
    Service Instance inst = null;
    Service OffOnApplication off_on_app;
    TVar Map(from: Text, to: Struct StructWrappedSwitch) switch_map;

    TVar List(element : Struct ConnectionWrapper) children;

    // @Override: from IApplication interface
    init(Service Instance inst_,
        TVar Map(from: Text, to: Struct StructWrappedSwitch) switch_map_)
    {
        inst = inst_;
        switch_map = switch_map_;
        off_on_app.init(inst,switch_map);
    }

    // @Override: from IApplication interface
    run()
    {
        off_on_app.run();
    }

    // @Override: from IOffOnApplication interface
    single_op(Text dummy_switch_id)
    {
        // Ask partner to perform action and perform action locally.
        atomically
        {
            @partner.called_only_by_partner_single_op();
            for (Text switch_id in switch_map)
                off_on_app.single_op(switch_id);
        }
    }

    
    add_child_connection(Endpoint PronghornConnection new_child)
    {
        Struct ConnectionWrapper wrapper;
        wrapper.child = new_child;
        children.append(wrapper);
    }

    insert_entry_on_all_switches_and_partners(Text tcp_src_port)
    {
        atomically
        {
            insert_entry_on_all_switches(tcp_src_port);
            for (Struct ConnectionWrapper wrapper in children)
            {
                Endpoint PronghornConnection endpt = wrapper.child;
                endpt.insert_entry_on_all_switches_and_partners(tcp_src_port);
            }
        }
    }
    insert_entry_on_all_switches(Text tcp_src_port)
    {
        atomically
        {
            for (Text switch_id in switch_map)
                off_on_app.add_entry_switch(switch_id);
        }
    }
    
    single_op_and_ask_children_for_single_op()
    {
        atomically {
            for (Text switch_id in switch_map)
                off_on_app.single_op(switch_id);

            for (Struct ConnectionWrapper wrapper in children)
            {
                Endpoint PronghornConnection endpt = wrapper.child;
                endpt.single_op_and_ask_children_for_single_op();
            }
        }
    }

    single_op_and_ask_children_for_single_op_switch_id(Text switch_id)
    {
        atomically {
            off_on_app.single_op(switch_id);

            for (Struct ConnectionWrapper wrapper in children)
            {
                Endpoint PronghornConnection endpt = wrapper.child;
                endpt.single_op_and_ask_children_for_single_op_switch_id(switch_id);
            }
        }
    }
}

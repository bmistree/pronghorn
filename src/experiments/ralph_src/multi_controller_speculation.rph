#include 'iapplication.rph'
alias Interface IApplication as 'pronghorn.IApplicationJava.IApplication';

alias Service Instance as 'pronghorn.InstanceJava.Instance';
alias Service OffOnApplication as 'experiments.OffOnApplicationJava.OffOnApplication';
alias Interface IOffOnApplication as 'experiments.IOffOnApplicationJava.IOffOnApplication';
alias Service MultiControllerSpeculation as 'experiments.MultiControllerSpeculationJava.MultiControllerSpeculation';

alias Struct Wrapper as 'experiments.MultiControllerSpeculationJava.Wrapper';

Struct Wrapper {
    Remote MultiControllerSpeculation service = null;
}

Service MultiControllerSpeculation implements Interface IApplication
{
    Service Instance inst = null;
    Service OffOnApplication off_on_app;
    TVar Map(from: Text, to: Struct StructWrappedSwitch) switch_map;

    TVar List(element : Struct Wrapper) partners;

    // @Override: from IApplication interface
    init(Service Instance inst_,
        TVar Map(from: Text, to: Struct StructWrappedSwitch) switch_map_)
    {
        inst = inst_;
        switch_map = switch_map_;
        off_on_app.init(inst,switch_map);
    }

    // @Override: from IApplication interface
    run()
    {
        off_on_app.run();
    }


    single_op(Number which_switch)
    {
        // first perform action locally, then ask partner to
        atomically
        {
            Number counter = 0;
            Text switch_id_to_use = '';
            // FIXME: this presupposes that keysets maps return for iterators in
            // same order.
            for (Text switch_id in switch_map)
            {
                if (counter == which_switch)
                {
                    switch_id_to_use = switch_id;
                    break;
                }
                counter = counter + 1;
            }

            off_on_app.single_op(switch_id_to_use);
            for (Struct Wrapper wrapper in partners) {
                Remote MultiControllerSpeculation endpt = wrapper.service;
                endpt.single_op(which_switch);
            }
        }
    }


    install_remotes(ServiceFactory factory) {
        // install a copy of this application on all connections
        List(element: Text) conn_uuids;
        conn_uuids = connected_uuids();
        Text loc_uuid = null;
        loc_uuid = local_uuid();

        for (Text conn_uuid in conn_uuids) {
            if (conn_uuid != loc_uuid) {
                ServiceReference service_reference = null;
                service_reference = install(conn_uuid, factory);
                Remote MultiControllerSpeculation remote_partner = null;
                remote_partner = factory.construct_remote_from_reference(service_reference);
                Struct Wrapper wrapper;
                wrapper.service = remote_partner;
                partners.append(wrapper);
            }
        }
    }
}

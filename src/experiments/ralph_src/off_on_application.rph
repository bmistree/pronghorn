#include 'iapplication.rph'
alias Interface IApplication as 'pronghorn.IApplicationJava.IApplication';

#include 'instance.rph'
alias Service Instance as 'pronghorn.InstanceJava.Instance';

#include 'wrapped_switch.rph'
alias Struct StructWrappedSwitch as 'pronghorn.WrappedSwitchJava.StructWrappedSwitch';

alias Interface IOffOnApplication as 'experiments.IOffOnApplicationJava.IOffOnApplication';


Service OffOnApplication
    implements Interface IApplication, Interface IOffOnApplication
{
    Service Instance inst = null;
    TVar Map(from: Text, to: Struct StructWrappedSwitch) switch_map;
    TVar Number coarse_lock_simulator = 0;

    
    // @Override --- from IApplication interface
    init(Service Instance inst_,
        TVar Map(from: Text, to: Struct StructWrappedSwitch) switch_map_)
    {
        inst = inst_;
        switch_map = switch_map_;
    }

    // @Override --- from IApplication interface; do nothing when
    // first installed
    run()
    {}


    // @Override --- from IOffOnApplication interface; For switch_id,
    // either append an entry to the switch's flow table (if none
    // exists) or remove an entry if there already is one.
    single_op(Text switch_id)
    {
        atomically
        {
            Struct StructWrappedSwitch target_switch = switch_map.get(switch_id);
            if (target_switch.wrapped_switch.ftable_size() == 0)
                add_entry_switch(switch_id);
            else
                remove_entry_switch(switch_id);
        }
    }

    num_flow_table_entries(Text switch_id) returns Number
    {
        Number to_return;
        atomically
        {
            Struct StructWrappedSwitch sws = switch_map.get(switch_id);
            to_return = sws.wrapped_switch.ftable_size();
        }
        return to_return;
    }
    
    remove_entry_switch(Text switch_id)
    {
        atomically
        {
            Struct StructWrappedSwitch target_switch = switch_map.get(switch_id);
            target_switch.wrapped_switch.remove_entry(0);
        }
    }

    add_entry_all_switches(Text src_ip)
    {
        atomically
        {
            for (Text switch_id in switch_map)
                add_specific_entry_switch(switch_id,src_ip);
        }
    }

    add_specific_entry_switch(Text switch_id, Text src_ip)
    {
        // Produce matches
        Struct MatchField match_field_ip_src;
        match_field_ip_src.field_name = 'nw_src';
        match_field_ip_src.value = src_ip;

        Struct MatchField match_field_ip_dst;
        match_field_ip_dst.field_name = 'nw_dst';
        match_field_ip_dst.value = '18.18.18.19';

        Struct Match match;
        match.all_matches.append(match_field_ip_src);
        match.all_matches.append(match_field_ip_dst);

        // add drop instruction
        Struct InstructionApplyActions drop_action;
        Struct Instructions instructions;
        instructions.apply_actions = drop_action;

        // genreate entry from matches and instruction
        Struct FlowTableEntry entry_to_add;
        entry_to_add.match = match;
        entry_to_add.instructions = instructions;

        // actually add the entry.
        Struct StructWrappedSwitch target_switch = switch_map.get(switch_id);
        target_switch.wrapped_switch.add_entry(entry_to_add);

        // find the switch and add the entry to it.
        Struct StructWrappedSwitch target_switch = switch_map.get(switch_id);

        atomically
        {
            target_switch.wrapped_switch.add_entry(entry_to_add);
        }
    }
    
    add_entry_switch(Text switch_id)
    {
        // FIXME: do not hardcode this value.  Multiple calls can lead to
        // duplicate rules on switch.
        add_specific_entry_switch(switch_id,'18.18.18.18');
    }    
    
    single_op_coarse(Text switch_id) 
    {
        atomically
        {
            coarse_lock_simulator = 3;
            single_op(switch_id);
        }
    }
    
    block_traffic_all_switches()
    {
        // inserts a rule to block all traffic on all ports
        add_entry_all_switches('18.18.18.18');
    }

    remove_first_entry_all_switches()
    {
        atomically
        {
            // remove the rule to block traffic on all ports.
            for (Text switch_id in switch_map)
            {
                Struct StructWrappedSwitch sws = switch_map.get(switch_id);
                if (sws.wrapped_switch.ftable_size() != 0)
                    sws.wrapped_switch.remove_entry(0);
            }
        }
    }
    
    logical_clear_switch_do_not_flush_clear_to_hardware(Text switch_id)
    {
        atomically
        {
            Struct StructWrappedSwitch sws = switch_map.get(switch_id);
            sws.wrapped_switch.logical_clear_switch_do_not_flush_clear_to_hardware();
        }
    }
}

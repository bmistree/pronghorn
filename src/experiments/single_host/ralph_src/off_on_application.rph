#include 'iapplication.rph'
alias Interface IApplication as 'pronghorn.IApplicationJava.IApplication';

#include 'instance.rph'
alias Service Instance as 'pronghorn.InstanceJava.Instance';


#include 'wrapped_switch.rph'
alias Struct StructWrappedSwitch as 'pronghorn.WrappedSwitchJava.StructWrappedSwitch';


Service OffOnApplication implements Interface IApplication
{
    Service Instance inst = null;
    TVar TrueFalse installed = False;
    TVar Map(from: Text, to: Struct StructWrappedSwitch) switch_map;
    
    // override from IApplication interface
    init(Service Instance inst_,
        TVar Map(from: Text, to: Struct StructWrappedSwitch) switch_map_)
    {
        inst = inst_;
        switch_map = switch_map_;
    }

    // do nothing when first installed
    run()
    {
        installed = True;
    }

    block_traffic_all_switches()
    {
        atomically
        {
            // insert a rule to block all traffic on all ports
            for (Text switch_id in switch_map)
            {
                Struct FlowTableEntry to_add;
                to_add.src_ip = '18.18.18.18';
                to_add.dst_ip = '18.18.18.19';
                // drop all packets
                to_add.action = '';

                Struct StructWrappedSwitch sws = switch_map.get(switch_id);
                sws.wrapped_switch.add_entry(to_add);
            }
        }
    }

    remove_first_entry_all_switches()
    {
        atomically
        {
            // remove the rule to block traffic on all ports.
            for (Text switch_id in switch_map)
            {
                Struct StructWrappedSwitch sws = switch_map.get(switch_id);
                if (sws.wrapped_switch.ftable_size() != 0)
                    sws.wrapped_switch.remove_entry(0);
            }
        }
    }
}

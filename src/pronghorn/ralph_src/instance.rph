#include 'wrapped_switch.rph'
alias Service WrappedSwitch as 'pronghorn.WrappedSwitchJava.WrappedSwitch';
alias Struct StructWrappedSwitch as 'pronghorn.WrappedSwitchJava.StructWrappedSwitch';

#include 'switch.rph'
alias Struct Switch as 'pronghorn.SwitchJava.Switch';
#include 'port_stats.rph'
alias Struct PortStats as 'pronghorn.PortStatsJava.PortStats';

#include 'port.rph'
alias Service PortUtil as 'pronghorn.PortJava.PortUtil';

alias Service FlowTableUtil as 'pronghorn.FTable.FlowTableUtil';
alias Interface IApplication as 'pronghorn.IApplicationJava.IApplication';
alias Interface IInitializer as 'ralph.IInitializer';
alias Service Tmp as 'ralph.Endpoint';
alias Service Instance as 'pronghorn.InstanceJava.Instance';

Service Instance implements Interface IInitializer
{
    // This is switch map that gets passed to root user.
    TVar Map(from: Text, to: Struct StructWrappedSwitch) switch_map = null;
    Service FlowTableUtil shared_ft_util = null;
    Service PortUtil shared_port_util = null;


    // Registers self as initializer
    start() {
        atomically {
            Service FlowTableUtil shared_ft_util_;
            Service PortUtil shared_port_util_;
            TVar Map(from: Text, to: Struct StructWrappedSwitch) switch_map_;
            switch_map = switch_map_;
            shared_ft_util = shared_ft_util_;
            shared_port_util = shared_port_util_;
            Service Instance inst = null;
            inst = self;
            register_initializer(Interface IApplication, inst);
        }
    }

    // Initialize applications
    init_new(Service Tmp s_to_init) {
        atomically {
            Interface IApplication app = null;
            app = dynamic_cast<Service IApplication>(s_to_init);
            add_application(app);
        }
    }

    add_application(Interface IApplication app)
    {
        atomically {
            app.init(self, switch_map);
            app.run();
        }
    }

    // called from external code
    add_switch(Struct Switch to_add)
    {
        Service WrappedSwitch ws;
        ws.init(to_add,shared_ft_util,shared_port_util);

        Struct StructWrappedSwitch sws;
        sws.wrapped_switch = ws;
        atomically {
            switch_map.set(to_add.switch_id,sws);
        }
    }

    update_port_stats(
        Text switch_id, Number port_num, Struct PortStats port_stats)
    {
        Struct StructWrappedSwitch sws = null;
        atomically
        {
            sws = switch_map.get(switch_id);
        }

        if (sws == null)
            return;
        sws.wrapped_switch.update_port_stats(port_num,port_stats);
    }

    // called from external code
    remove_switch(Text to_remove_id)
    {
        atomically
        {
            switch_map.remove(to_remove_id);
        }
    }

    process_port_updates(List(element: Struct Port) port_updates)
    {
        for (Struct Port port in port_updates)
        {
            Text local_switch_id = port.local_switch_id;
            Number local_port_number = port.local_port_number;
            atomically
            {
                if (switch_map.contains(local_switch_id))
                {
                    Struct StructWrappedSwitch sws = null;
                    sws = switch_map.get(local_switch_id);
                    Service WrappedSwitch wrapped_switch = null;
                    wrapped_switch = sws.wrapped_switch;
                    {
                        Struct Switch internal_switch =
                            wrapped_switch.get_switch();

                        Struct Port existing_port =
                            wrapped_switch.get_available_port(
                                local_port_number);

                        // filter out ports we already have
                        if (existing_port == null)
                        {
                            wrapped_switch.set_available_port(
                                local_port_number,port);
                        }
                        elif (existing_port.remote_switch_id !=
                            port.remote_switch_id)
                        {
                            wrapped_switch.set_available_port(
                                local_port_number,port);
                        }
                    }
                }
            }
        }
    }
}

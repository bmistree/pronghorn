#include 'port.rph'
alias Struct FlowTableEntry as 'pronghorn.FTable.FlowTableEntry';
#include 'match.rph'
alias Struct Match as 'pronghorn.MatchJava.Match';
#include 'flow_table_entry.rph'
alias Struct Port as 'pronghorn.PortJava.Port';
#include 'switch_delta.rph'
alias Struct SwitchDelta as 'pronghorn.SwitchDeltaJava.SwitchDelta';
#include 'port_stats.rph'
alias Struct PortStats as 'pronghorn.PortStatsJava.PortStats';
#include 'access_control.rph'
alias Struct AccessControl as 'pronghorn.AccessControlJava.AccessControl';

Struct Switch
{
    // unique id for each switch
    Text switch_id;    
    TVar Number available_capacity;
    TVar List (element: Struct FlowTableEntry) ftable;

    // Indices are port numbers on local switch
    TVar Map (from: Number, to: Struct Port) all_ports;
    // Ports link two switches.  available ports is a map of ports
    // that the other end of the port exists for.  (Example of a case
    // where other end does not exist: added multiple switches to the
    // network simultaneously.)
    TVar Map (from: Number, to: Struct Port) available_ports;

    Struct SwitchDelta delta = null;

    // initialize all port stats to 0.
    Map (from: Number, to: Struct PortStats) port_stats;


    // keys are principal ids.  values are access controls that those
    // principals have on switch.  if principal is not listed in this
    // map, then use default_access_control struct below.
    TVar Map(from: Number, to: Struct AccessControl) access_control_map;
    
    // if a user id is not in the access control map above, check what
    // the default access should be using struct below.  If struct
    // below is null, then keep switch hidden from application.
    Struct AccessControl default_access_control = null;
}
